name: Create Release

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: windows-latest
    env:
      MajorVersion: 1
      MinorVersion: 1
      BuildVersion: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: "16.x"  # Use a more recent version of Node.js

      - run: npm ci
        working-directory: "./build-scripts"

      - name: Version Stamp Code Components
        uses: actions/github-script@v2
        with:
          script: |
            const version = require(`${process.env.GITHUB_WORKSPACE}/build-scripts/version-stamp.js`)
            version({
              majorVersion: ${{ env.MajorVersion }},
              minorVersion: ${{ env.MinorVersion }},
              buildVersion: ${{ env.BuildVersion }},
              manifestsPaths: [
                `${process.env.GITHUB_WORKSPACE}/Breadcrumb/Breadcrumb`,
                `${process.env.GITHUB_WORKSPACE}/DonutChart/DonutChart`
                ],
              solutionPaths: `${process.env.GITHUB_WORKSPACE}/Solution/src/Other/Solution.xml`,
              beta: false}
              )

      - run: npm cache clean --force

      - name: Install Breadcrumb Dependencies
        run: |
          if (Test-Path -Path ./Breadcrumb/package-lock.json) {
            Remove-Item -Force ./Breadcrumb/package-lock.json
          }
          cd ./Breadcrumb
          npm install --legacy-peer-deps  # Install peer dependencies
          npm ci
        working-directory: "./"

      - name: Install DonutChart Dependencies
        run: |
          if (Test-Path -Path ./DonutChart/package-lock.json) {
            Remove-Item -Force ./DonutChart/package-lock.json
          }
          cd ./DonutChart
          npm install --legacy-peer-deps  # Install peer dependencies
          npm ci
        working-directory: "./"

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "6.x"  # Ensure .NET 6.0 is installed

      - run: dotnet nuget locals all --clear

      - run: dotnet restore
        working-directory: "./Solution"

      - run: dotnet build -c release
        working-directory: "./Solution"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.MajorVersion }}.${{ env.MinorVersion }}.${{ env.BuildVersion }}
          release_name: v${{ env.MajorVersion }}.${{ env.MinorVersion }}.${{ env.BuildVersion }}
          draft: true
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset1
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Solution/bin/Release/Solution.zip
          asset_name: PowerCATCodeComponents_unmanaged_${{ env.MajorVersion }}_${{ env.MinorVersion }}_0_${{ env.BuildVersion }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset
        id: upload-release-asset2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: Solution/bin/Release/Solution_managed.zip
          asset_name: PowerCATCodeComponents_managed_${{ env.MajorVersion }}_${{ env.MinorVersion }}_0_${{ env.BuildVersion }}.zip
          asset_content_type: application/zip
